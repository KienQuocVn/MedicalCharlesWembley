// <auto-generated />
using System;
using MedicalCharlesWembley.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalCharlesWembley.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicalCharlesWembley.Models.MapAllID", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("MapAllID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("KeyWord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MapID")
                        .HasColumnType("bigint");

                    b.Property<long?>("MapProduct")
                        .HasColumnType("bigint");

                    b.Property<int>("thu_tu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id")
                        .HasName("PK_MapAll_ID");

                    b.ToTable("MapAll_ID", (string)null);
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.NewLetter", b =>
                {
                    b.Property<long>("NewLetterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("NewLetterID"));

                    b.Property<long?>("AddByUserID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedByUserID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Opt1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opt2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opt3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("NewLetterID")
                        .HasName("PK_T_NewLetter");

                    b.ToTable("NewLetters");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TArea", b =>
                {
                    b.Property<int>("TAreaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TAreaID"));

                    b.Property<string>("AreaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Keyworder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("TAreaID")
                        .HasName("PK_TArea");

                    b.ToTable("TAreas");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TAreaMap", b =>
                {
                    b.Property<long>("TAreaMapID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TAreaMapID"));

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TAreaID")
                        .HasColumnType("int");

                    b.Property<long?>("TMapID")
                        .HasColumnType("bigint");

                    b.HasKey("TAreaMapID")
                        .HasName("PK_TAreaMap");

                    b.ToTable("TAreaMaps");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TBannerAdv", b =>
                {
                    b.Property<int>("BannerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BannerID"));

                    b.Property<long?>("FileID")
                        .HasColumnType("bigint");

                    b.Property<long?>("FileID1")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("KeyWord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Str1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Str2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Str3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BannerID")
                        .HasName("PK_TBannerAdv");

                    b.ToTable("TBannerAdvs");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TBannerAdvDescription", b =>
                {
                    b.Property<int>("BannerID")
                        .HasColumnType("int");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<string>("Des1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Des2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Des3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BannerID", "LanguageID")
                        .HasName("PK_TBannerAdvDescription");

                    b.ToTable("TBannerAdvDescriptions");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TComment", b =>
                {
                    b.Property<long>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CommentID"));

                    b.Property<string>("Comment_Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ID_Ref")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Parent")
                        .HasColumnType("bigint");

                    b.Property<long?>("Ref_Type")
                        .HasColumnType("bigint");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserID")
                        .HasColumnType("bigint");

                    b.Property<string>("str01")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentID")
                        .HasName("PK_TComment");

                    b.ToTable("TComments");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TCommonFile", b =>
                {
                    b.Property<long>("CommonFileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CommonFileID"));

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RealFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ServerFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommonFileID")
                        .HasName("PK__TCommFile__0C66AE13");

                    b.ToTable("TCommonFiles");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TConfig", b =>
                {
                    b.Property<int>("ConfigID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConfigID"));

                    b.Property<string>("ConfigDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfigGroup1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfigGroup2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfigKeyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfigName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfigType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfigValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfigValueRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Is_Admin")
                        .HasColumnType("bit");

                    b.HasKey("ConfigID")
                        .HasName("PK_TConfig");

                    b.ToTable("TConfigs");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TCountry", b =>
                {
                    b.Property<int>("country_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("country_id"));

                    b.Property<string>("address_format")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("iso_code_2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("iso_code_3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("country_id")
                        .HasName("PK_TCountry");

                    b.ToTable("TCountries");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TCoupon", b =>
                {
                    b.Property<int>("coupon_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("coupon_id"));

                    b.Property<string>("code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date_added")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<DateTime>("date_end")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("date_start")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("discount")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)");

                    b.Property<int>("shipping")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<decimal>("total")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("uses_customer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("uses_total")
                        .HasColumnType("int");

                    b.HasKey("coupon_id")
                        .HasName("PK_TCoupon");

                    b.ToTable("TCoupons");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TCouponDescription", b =>
                {
                    b.Property<int>("coupon_id")
                        .HasColumnType("int");

                    b.Property<int>("language_id")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("coupon_id", "language_id")
                        .HasName("PK_TCouponDescription");

                    b.ToTable("TCouponDescriptions");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TCouponProduct", b =>
                {
                    b.Property<int>("coupon_product_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("coupon_product_id"));

                    b.Property<int>("coupon_id")
                        .HasColumnType("int");

                    b.Property<int>("product_id")
                        .HasColumnType("int");

                    b.HasKey("coupon_product_id")
                        .HasName("PK_TCouponProduct");

                    b.ToTable("TCouponProducts");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TCurrency", b =>
                {
                    b.Property<int>("CurrencyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrencyID"));

                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("DecimalPlace")
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTime>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SymbolLeft")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SymbolRight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<float?>("Value")
                        .HasColumnType("real");

                    b.HasKey("CurrencyID")
                        .HasName("PK_TCurrency");

                    b.ToTable("TCurrencies");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TCustomer", b =>
                {
                    b.Property<int>("customer_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("customer_id"));

                    b.Property<int>("address_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("cart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date_added")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<string>("email")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("fax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("firstname")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastname")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int>("newsletter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("password")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("telephone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.HasKey("customer_id")
                        .HasName("PK_TCustomer");

                    b.ToTable("TCustomers");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TDBErrLog", b =>
                {
                    b.Property<long>("ErrorLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ErrorLogID"));

                    b.Property<int>("ErrorLine")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ErrorNumber")
                        .HasColumnType("int");

                    b.Property<string>("ErrorProcedure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ErrorSeverity")
                        .HasColumnType("int");

                    b.Property<int>("ErrorState")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("content")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ErrorLogID")
                        .HasName("PK_TDBErrLog");

                    b.ToTable("TDBErrLogs");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TDownload", b =>
                {
                    b.Property<int>("DownloadID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DownloadID"));

                    b.Property<string>("Filename")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("Mask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("Remaining")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("DownloadID")
                        .HasName("PK_TDownload");

                    b.ToTable("TDownloads");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TFileUpload", b =>
                {
                    b.Property<long>("UploadFileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UploadFileID"));

                    b.Property<string>("ConvertFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyWord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UploadFileID")
                        .HasName("PK_FileUpload");

                    b.ToTable("TFileUploads");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TLanguage", b =>
                {
                    b.Property<int>("LanguageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageID"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Directory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("FileName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<long?>("Image")
                        .HasColumnType("bigint");

                    b.Property<string>("Locale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LanguageID")
                        .HasName("PK__language__66603565");

                    b.ToTable("TLanguages");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TManufacturer", b =>
                {
                    b.Property<int>("ManufacturerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManufacturerID"));

                    b.Property<long>("Image")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("ManufacturerID")
                        .HasName("PK__manufacturer__6D0D32F4");

                    b.ToTable("TManufacturers");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TMapTerritoryArea", b =>
                {
                    b.Property<long>("MapTerriAreaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MapTerriAreaID"));

                    b.Property<int?>("AreaID")
                        .HasColumnType("int");

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TMapID")
                        .HasColumnType("bigint");

                    b.Property<int?>("TerritoryID")
                        .HasColumnType("int");

                    b.HasKey("MapTerriAreaID")
                        .HasName("PK_TMapTerritoryArea");

                    b.ToTable("TMapTerritoryAreas");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TMapType", b =>
                {
                    b.Property<long>("MapTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MapTypeID"));

                    b.Property<long?>("MapID")
                        .HasColumnType("bigint");

                    b.Property<int?>("TypeID")
                        .HasColumnType("int");

                    b.HasKey("MapTypeID")
                        .HasName("PK_TMapType");

                    b.ToTable("TMapTypes");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TMenu", b =>
                {
                    b.Property<int>("Menu_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Menu_ID"));

                    b.Property<string>("Alias_Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Map_ID")
                        .HasColumnType("bigint");

                    b.Property<int>("Modify_User")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option_1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option_2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option_3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option_4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option_5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option_6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Parent_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Reg_Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("Reg_User")
                        .HasColumnType("int");

                    b.Property<bool>("Require_Login")
                        .HasColumnType("bit");

                    b.Property<int>("Sort_Order")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update_Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Menu_ID")
                        .HasName("PK_TMenu");

                    b.ToTable("TMenus");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TMenuAdmin", b =>
                {
                    b.Property<int>("MenuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuID"));

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MenuType")
                        .HasColumnType("int");

                    b.Property<string>("Option1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Option2")
                        .HasColumnType("int");

                    b.Property<bool?>("Option3")
                        .HasColumnType("bit");

                    b.HasKey("MenuID")
                        .HasName("PK_TMenuAdmin");

                    b.ToTable("TMenuAdmins");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TNews", b =>
                {
                    b.Property<long>("NewsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("NewsID"));

                    b.Property<string>("Alias_Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountView")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateMng")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DefaultPic")
                        .HasColumnType("bigint");

                    b.Property<string>("IPAdd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUser")
                        .HasColumnType("int");

                    b.Property<long?>("NewsLike")
                        .HasColumnType("bigint");

                    b.Property<int?>("NewsSourceID")
                        .HasColumnType("int");

                    b.Property<int?>("NewsStatus")
                        .HasColumnType("int");

                    b.Property<string>("Old_Img_Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Old_Post_Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RegUser")
                        .HasColumnType("int");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Str1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Str2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Str3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Str4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Str5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Str6")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NewsID")
                        .HasName("PK_news");

                    b.ToTable("TNews");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TNewsCategory", b =>
                {
                    b.Property<int>("NewsCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewsCategoryID"));

                    b.Property<string>("Alias_Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Image")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsView")
                        .HasColumnType("bit");

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("UniqueKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NewsCategoryID")
                        .HasName("PK_category");

                    b.ToTable("TNewsCategories");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TNewsCategoryDescription", b =>
                {
                    b.Property<int>("NewsCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NewsCategoryID", "LanguageID")
                        .HasName("PK_TNewsCategoryDescription");

                    b.ToTable("TNewsCategoryDescriptions");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TNewsDescription", b =>
                {
                    b.Property<long>("NewsID")
                        .HasColumnType("bigint");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NewsID", "LanguageID")
                        .HasName("PK_TNewsDescription");

                    b.ToTable("TNewsDescriptions");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TNewsSource", b =>
                {
                    b.Property<int>("NewsSourceID")
                        .HasColumnType("int");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<string>("NewsSourceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NewsSourceID", "LanguageID")
                        .HasName("PK_tapchi");

                    b.ToTable("TNewsSources");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TNewsToCategory", b =>
                {
                    b.Property<int>("NewsCategoryID")
                        .HasColumnType("int");

                    b.Property<long>("NewsID")
                        .HasColumnType("bigint");

                    b.HasKey("NewsCategoryID", "NewsID")
                        .HasName("PK_TNewsCategoryDetail");

                    b.ToTable("TNewsToCategories");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TOrder", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CouponID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)");

                    b.HasKey("OrderID")
                        .HasName("PK_TOrder");

                    b.ToTable("TOrders");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TOrderProduct", b =>
                {
                    b.Property<int>("OrderProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderProductID"));

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("Total")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)");

                    b.HasKey("OrderProductID")
                        .HasName("PK_TOrderProduct");

                    b.ToTable("TOrderProducts");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TPoll", b =>
                {
                    b.Property<int>("PollID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PollID"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PollID")
                        .HasName("PK_TPolls");

                    b.ToTable("TPolls");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TPollOption", b =>
                {
                    b.Property<int>("PollOptionID")
                        .HasColumnType("int");

                    b.Property<int>("PollID")
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Votes")
                        .HasColumnType("int");

                    b.HasKey("PollOptionID", "PollID")
                        .HasName("PK_TPollOptions");

                    b.HasIndex("PollID");

                    b.ToTable("TPollOptions");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProduct", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<string>("Alias_Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountView")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("CurrencyID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateAvailable")
                        .HasColumnType("datetime2");

                    b.Property<long>("Image")
                        .HasColumnType("bigint");

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManufacturerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<decimal>("Price")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)");

                    b.Property<string>("Price_Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price_Text_Bef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProNew")
                        .HasColumnType("int");

                    b.Property<int?>("ProSale")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("Shipping")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("StockStatusID")
                        .HasColumnType("int");

                    b.Property<int>("TaxClassID")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("WeightClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("str1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("str2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("str3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("str4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("str5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("str6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("str7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("str8")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductID")
                        .HasName("PK__product__2EDAF651");

                    b.ToTable("TProducts");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductCart", b =>
                {
                    b.Property<long>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CartID"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("So_luong")
                        .HasColumnType("int");

                    b.Property<int?>("nguoi_muaID")
                        .HasColumnType("int");

                    b.Property<float?>("price")
                        .HasColumnType("real");

                    b.Property<int?>("status")
                        .HasColumnType("int");

                    b.HasKey("CartID")
                        .HasName("PK_TProductCart");

                    b.ToTable("TProductCarts");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductCategory", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("Alias_Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Banner")
                        .HasColumnType("bigint");

                    b.Property<long>("Image")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("ParentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Str1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Str2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Str3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Str4")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID")
                        .HasName("PK__category__22AA2996");

                    b.ToTable("TProductCategories");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductCategoryDescription", b =>
                {
                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.HasKey("CategoryID", "LanguageID")
                        .HasName("PK__category_descrip__29572725");

                    b.ToTable("TProductCategoryDescriptions");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductColor", b =>
                {
                    b.Property<long>("ProductColorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductColorID"));

                    b.Property<long>("Hinh_Anh")
                        .HasColumnType("bigint");

                    b.Property<string>("Ma_Mau")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_CN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_VN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Sort_Order")
                        .HasColumnType("int");

                    b.HasKey("ProductColorID")
                        .HasName("PK__product_color__40058253");

                    b.HasIndex("ProductID");

                    b.ToTable("TProductColors");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductDescription", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("LanguageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Des1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Des2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Des3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Des4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Des5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Des6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductID", "LanguageID")
                        .HasName("PK__product_descript__3B40CD36");

                    b.ToTable("TProductDescriptions");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductDiscount", b =>
                {
                    b.Property<int>("ProductDiscountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductDiscountID"));

                    b.Property<decimal>("Discount")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductDiscountID")
                        .HasName("PK_TProductDiscount");

                    b.HasIndex("ProductID");

                    b.ToTable("TProductDiscounts");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductImage", b =>
                {
                    b.Property<long>("ProductImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductImageID"));

                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("TempID1")
                        .HasColumnType("int");

                    b.Property<int?>("TempID2")
                        .HasColumnType("int");

                    b.HasKey("ProductImageID")
                        .HasName("PK__product_image__40058253");

                    b.HasIndex("ProductID");

                    b.ToTable("TProductImages");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductOption", b =>
                {
                    b.Property<int>("ProductOptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductOptionID"));

                    b.Property<long?>("Img")
                        .HasColumnType("bigint");

                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("ProductOptionID")
                        .HasName("PK_TProductOption");

                    b.HasIndex("ProductID");

                    b.ToTable("TProductOptions");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductOptionDescription", b =>
                {
                    b.Property<int>("ProductOptionID")
                        .HasColumnType("int");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("Tmp1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tmp2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tmp3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tmp4")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductOptionID", "LanguageID")
                        .HasName("PK_TProductOptionDescription");

                    b.ToTable("TProductOptionDescriptions");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductOptionValue", b =>
                {
                    b.Property<int>("ProductOptionValueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductOptionValueID"));

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<decimal>("Price")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("ProductOptionID")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("ProductOptionValueID")
                        .HasName("PK_TProductOptionValue");

                    b.HasIndex("ProductID");

                    b.HasIndex("ProductOptionID");

                    b.ToTable("TProductOptionValues");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductOptionValueDescription", b =>
                {
                    b.Property<int>("ProductOptionValueID")
                        .HasColumnType("int");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("ProductOptionValueID", "LanguageID")
                        .HasName("PK_TProductOptionValueDescription");

                    b.ToTable("TProductOptionValueDescriptions");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductRelated", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("RelatedID")
                        .HasColumnType("int");

                    b.HasKey("ProductID", "RelatedID")
                        .HasName("PK_TProductRelated");

                    b.ToTable("TProductRelateds");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductSize", b =>
                {
                    b.Property<long>("SizeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SizeID"));

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentID")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("SizeID")
                        .HasName("PK_TProductSize");

                    b.ToTable("TProductSizes");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductSizeDescription", b =>
                {
                    b.Property<long>("SizeDesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SizeDesID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LanguageID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SizeID")
                        .HasColumnType("bigint");

                    b.Property<string>("SubContent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SizeDesID")
                        .HasName("PK_TProductSizeDescription");

                    b.ToTable("TProductSizeDescriptions");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductSpecial", b =>
                {
                    b.Property<int>("ProductSpecialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductSpecialID"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductSpecialID")
                        .HasName("PK_TProductSpecial");

                    b.HasIndex("ProductID");

                    b.ToTable("TProductSpecials");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductToCategory", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("ProductID", "CategoryID")
                        .HasName("PK_TProductToCategory");

                    b.HasIndex("CategoryID");

                    b.ToTable("TProductToCategories");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductToDownload", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("DownloadID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("ProductID", "DownloadID")
                        .HasName("PK_TProductToDownload");

                    b.HasIndex("DownloadID");

                    b.ToTable("TProductToDownloads");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TRedirectUrl", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("From_Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Module")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("To_Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID")
                        .HasName("PK_TRedirectUrl");

                    b.ToTable("TRedirectUrls");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TRegion", b =>
                {
                    b.Property<int>("RegionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegionID"));

                    b.Property<int?>("FMID")
                        .HasColumnType("int");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.Property<string>("RegionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("RegionID")
                        .HasName("PK_TRegion");

                    b.ToTable("TRegions");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TReview", b =>
                {
                    b.Property<int>("review_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("review_id"));

                    b.Property<string>("author")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int>("customer_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("date_added")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<DateTime>("date_modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<int>("product_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("rating")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("review_id")
                        .HasName("PK_TReview");

                    b.ToTable("TReviews");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TSeo", b =>
                {
                    b.Property<long>("SeoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SeoID"));

                    b.Property<string>("KeyOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MapID")
                        .HasColumnType("bigint");

                    b.Property<string>("Mota")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SeoType")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Uniquekey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeoID")
                        .HasName("PK_TSeo");

                    b.ToTable("TSeos");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TSeoDescription", b =>
                {
                    b.Property<long>("SeoDesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SeoDesID"));

                    b.Property<int?>("LanguageID")
                        .HasColumnType("int");

                    b.Property<string>("SeoDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SeoID")
                        .HasColumnType("bigint");

                    b.Property<string>("SeoKeyWord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoTmp1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoTmp2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeoDesID")
                        .HasName("PK_TSeoDescription");

                    b.ToTable("TSeoDescriptions");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TSetting", b =>
                {
                    b.Property<int>("setting_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("setting_id"));

                    b.Property<string>("group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("setting_id")
                        .HasName("PK_TSetting");

                    b.ToTable("TSettings");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TStockStatus", b =>
                {
                    b.Property<int>("StockStatusID")
                        .HasColumnType("int");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StockStatusID", "LanguageID")
                        .HasName("PK_TStockStatus");

                    b.ToTable("TStockStatuses");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TTaxClass", b =>
                {
                    b.Property<int>("TaxClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaxClassID"));

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<DateTime>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<DateTime>("RegDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<string>("Title")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.HasKey("TaxClassID")
                        .HasName("PK_TTaxClass");

                    b.ToTable("TTaxClasses");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TTaxRate", b =>
                {
                    b.Property<int>("tax_rate_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("tax_rate_id"));

                    b.Property<DateTime>("date_added")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<DateTime>("date_modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<string>("description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int>("geo_zone_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal>("rate")
                        .HasPrecision(7, 4)
                        .HasColumnType("decimal(7,4)");

                    b.Property<int>("tax_class_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("tax_rate_id")
                        .HasName("PK_TTaxRate");

                    b.ToTable("TTaxRates");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TTerritory", b =>
                {
                    b.Property<int>("TerritoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TerritoryID"));

                    b.Property<int?>("AreaID")
                        .HasColumnType("int");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TerriParent")
                        .HasColumnType("int");

                    b.Property<string>("TerritoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TerritoryID")
                        .HasName("PK_TTerritory");

                    b.ToTable("TTerritories");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TType", b =>
                {
                    b.Property<int>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeID"));

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeKeyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeParent")
                        .HasColumnType("int");

                    b.Property<int?>("status")
                        .HasColumnType("int");

                    b.HasKey("TypeID")
                        .HasName("PK_TType");

                    b.ToTable("TTypes");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TUser", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Brithday")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsExpire")
                        .HasColumnType("bit");

                    b.Property<string>("LoginID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifyUser")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermissionString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RegUser")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Tilly")
                        .HasColumnType("int");

                    b.Property<long?>("UserLike")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserType")
                        .HasColumnType("int");

                    b.Property<string>("YahooID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID")
                        .HasName("PK_TGM_USR");

                    b.ToTable("TUsers");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TUserMapLink", b =>
                {
                    b.Property<long>("MapLinkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MapLinkID"));

                    b.Property<int?>("LinkID")
                        .HasColumnType("int");

                    b.Property<int?>("MenuID")
                        .HasColumnType("int");

                    b.Property<string>("Option1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("MapLinkID")
                        .HasName("PK_TUserMapLink_1");

                    b.ToTable("TUserMapLinks");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TUserMapNews", b =>
                {
                    b.Property<long>("MapMemberNewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MapMemberNewID"));

                    b.Property<long?>("MemberID")
                        .HasColumnType("bigint");

                    b.Property<long?>("NewsID")
                        .HasColumnType("bigint");

                    b.HasKey("MapMemberNewID")
                        .HasName("PK_TUserMapNews");

                    b.ToTable("TUserMapNews");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TUserMapRole", b =>
                {
                    b.Property<int>("UserMapRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserMapRoleID"));

                    b.Property<int?>("RoleMemberID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserMapRoleID")
                        .HasName("PK_TUserMapRole");

                    b.ToTable("TUserMapRoles");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TUserRoleMember", b =>
                {
                    b.Property<int>("RoleMemberID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleMemberID"));

                    b.Property<int?>("EndNumber")
                        .HasColumnType("int");

                    b.Property<string>("KeyWord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StartNumber")
                        .HasColumnType("int");

                    b.HasKey("RoleMemberID")
                        .HasName("PK_TRoleMember");

                    b.ToTable("TUserRoleMembers");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TWeightClass", b =>
                {
                    b.Property<int>("WeightClassID")
                        .HasColumnType("int");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.HasKey("WeightClassID", "LanguageID")
                        .HasName("PK_TWeightClass");

                    b.ToTable("TWeightClasses");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TWeightRule", b =>
                {
                    b.Property<int>("from_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("rule")
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)");

                    b.Property<int>("to_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.ToTable("TWeightRules");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TZone", b =>
                {
                    b.Property<int>("zone_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("zone_id"));

                    b.Property<string>("code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int>("country_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("zone_id")
                        .HasName("PK_TZone");

                    b.ToTable("TZones");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TZoneToGeoZone", b =>
                {
                    b.Property<int>("zone_to_geo_zone_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("zone_to_geo_zone_id"));

                    b.Property<int>("country_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("date_added")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<DateTime>("date_modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<int?>("geo_zone_id")
                        .HasColumnType("int");

                    b.Property<int?>("zone_id")
                        .HasColumnType("int");

                    b.HasKey("zone_to_geo_zone_id")
                        .HasName("PK_TZoneToGeoZone");

                    b.ToTable("TZoneToGeoZones");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TmpProduct", b =>
                {
                    b.Property<string>("Brand_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("English_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Item_code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Product_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Retail_price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status_for_ordering")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("TmpProducts");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.UrlAlias", b =>
                {
                    b.Property<int>("url_alias_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("url_alias_id"));

                    b.Property<string>("alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("query")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("url_alias_id")
                        .HasName("PK_UrlAlias");

                    b.ToTable("UrlAliases");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TNewsCategoryDescription", b =>
                {
                    b.HasOne("MedicalCharlesWembley.Models.TNewsCategory", "TNewsCategory")
                        .WithMany()
                        .HasForeignKey("NewsCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TNewsCategoryDescription_TNewsCategory");

                    b.Navigation("TNewsCategory");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TNewsToCategory", b =>
                {
                    b.HasOne("MedicalCharlesWembley.Models.TNewsCategory", "TNewsCategory")
                        .WithMany()
                        .HasForeignKey("NewsCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TNewsToCategory_TNewsCategory");

                    b.Navigation("TNewsCategory");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TPollOption", b =>
                {
                    b.HasOne("MedicalCharlesWembley.Models.TPoll", "TPoll")
                        .WithMany()
                        .HasForeignKey("PollID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TPollOptions_TPolls");

                    b.Navigation("TPoll");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductColor", b =>
                {
                    b.HasOne("MedicalCharlesWembley.Models.TProduct", "TProduct")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TProductColor_TProduct");

                    b.Navigation("TProduct");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductDescription", b =>
                {
                    b.HasOne("MedicalCharlesWembley.Models.TProduct", "TProduct")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TProductDescription_TProduct");

                    b.Navigation("TProduct");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductDiscount", b =>
                {
                    b.HasOne("MedicalCharlesWembley.Models.TProduct", "TProduct")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TProductDiscount_TProduct");

                    b.Navigation("TProduct");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductImage", b =>
                {
                    b.HasOne("MedicalCharlesWembley.Models.TProduct", "TProduct")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TProductImage_TProduct");

                    b.Navigation("TProduct");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductOption", b =>
                {
                    b.HasOne("MedicalCharlesWembley.Models.TProduct", "TProduct")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_product_option_product");

                    b.Navigation("TProduct");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductOptionDescription", b =>
                {
                    b.HasOne("MedicalCharlesWembley.Models.TProductOption", "TProductOption")
                        .WithMany()
                        .HasForeignKey("ProductOptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TProductOptionDescription_TProductOption");

                    b.Navigation("TProductOption");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductOptionValue", b =>
                {
                    b.HasOne("MedicalCharlesWembley.Models.TProduct", "TProduct")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TProductOptionValue_TProduct");

                    b.HasOne("MedicalCharlesWembley.Models.TProductOption", "TProductOption")
                        .WithMany()
                        .HasForeignKey("ProductOptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TProductOptionValue_TProductOption");

                    b.Navigation("TProduct");

                    b.Navigation("TProductOption");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductOptionValueDescription", b =>
                {
                    b.HasOne("MedicalCharlesWembley.Models.TProductOptionValue", "TProductOptionValue")
                        .WithMany()
                        .HasForeignKey("ProductOptionValueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TProductOptionValueDescription_TProductOptionValue");

                    b.Navigation("TProductOptionValue");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductRelated", b =>
                {
                    b.HasOne("MedicalCharlesWembley.Models.TProduct", "TProduct")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TProductRelated_TProduct");

                    b.Navigation("TProduct");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductSpecial", b =>
                {
                    b.HasOne("MedicalCharlesWembley.Models.TProduct", "TProduct")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TProductSpecial_TProduct");

                    b.Navigation("TProduct");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductToCategory", b =>
                {
                    b.HasOne("MedicalCharlesWembley.Models.TProductCategory", "TProductCategory")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TProductToCategory_TProductCategory");

                    b.HasOne("MedicalCharlesWembley.Models.TProduct", "TProduct")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TProductToCategory_TProduct");

                    b.Navigation("TProduct");

                    b.Navigation("TProductCategory");
                });

            modelBuilder.Entity("MedicalCharlesWembley.Models.TProductToDownload", b =>
                {
                    b.HasOne("MedicalCharlesWembley.Models.TDownload", "TDownload")
                        .WithMany()
                        .HasForeignKey("DownloadID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TProductToDownload_TDownload");

                    b.HasOne("MedicalCharlesWembley.Models.TProduct", "TProduct")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TProductToDownload_TProduct");

                    b.Navigation("TDownload");

                    b.Navigation("TProduct");
                });
#pragma warning restore 612, 618
        }
    }
}
